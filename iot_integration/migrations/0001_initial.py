# Generated by Django 4.2.7 on 2025-07-07 14:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('diagnosis', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SensorDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('device_type', models.CharField(choices=[('soil_moisture', 'Soil Moisture'), ('temperature', 'Temperature'), ('humidity', 'Humidity'), ('ph_sensor', 'pH Sensor'), ('light_sensor', 'Light Sensor'), ('weather_station', 'Weather Station')], max_length=20)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('error', 'Error')], default='active', max_length=15)),
                ('last_communication', models.DateTimeField(blank=True, null=True)),
                ('battery_level', models.FloatField(blank=True, help_text='Battery percentage', null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=20)),
                ('installation_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WeatherData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(max_length=200)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('timestamp', models.DateTimeField()),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('humidity', models.FloatField(blank=True, null=True)),
                ('precipitation', models.FloatField(blank=True, null=True)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('wind_direction', models.FloatField(blank=True, null=True)),
                ('pressure', models.FloatField(blank=True, null=True)),
                ('uv_index', models.FloatField(blank=True, null=True)),
                ('cloud_cover', models.FloatField(blank=True, null=True)),
                ('source', models.CharField(default='api', max_length=50)),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'unique_together': {('location', 'timestamp', 'source')},
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('quality_score', models.FloatField(default=1.0, help_text='Data quality 0-1')),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iot_integration.sensordevice')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FarmEnvironment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=200)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('area_size', models.FloatField(help_text='Area in acres')),
                ('soil_type', models.CharField(blank=True, max_length=100)),
                ('irrigation_type', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crops', models.ManyToManyField(related_name='farm_environments', to='diagnosis.crop')),
                ('devices', models.ManyToManyField(blank=True, related_name='farm_environments', to='iot_integration.sensordevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('condition_type', models.CharField(choices=[('above', 'Above Threshold'), ('below', 'Below Threshold'), ('between', 'Between Values'), ('rapid_change', 'Rapid Change')], max_length=15)),
                ('threshold_value', models.FloatField()),
                ('threshold_value_max', models.FloatField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('notification_email', models.BooleanField(default=True)),
                ('notification_sms', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iot_integration.sensordevice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='active', max_length=15)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iot_integration.alertrule')),
                ('sensor_reading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='iot_integration.sensorreading')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['device', '-timestamp'], name='iot_integra_device__3c2bed_idx'),
        ),
        migrations.AddIndex(
            model_name='sensorreading',
            index=models.Index(fields=['timestamp'], name='iot_integra_timesta_a9bad3_idx'),
        ),
    ]
