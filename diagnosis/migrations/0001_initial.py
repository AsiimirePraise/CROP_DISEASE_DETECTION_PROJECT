# Generated by Django 4.2.7 on 2025-07-06 22:30

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('scientific_name', models.CharField(blank=True, max_length=150)),
                ('category', models.CharField(blank=True, max_length=50)),
                ('growing_season', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('image', models.ImageField(upload_to='diagnosis_images/')),
                ('location', models.CharField(blank=True, max_length=200)),
                ('gps_coordinates', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True, help_text='Additional symptoms or observations')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=15)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('processing_time', models.FloatField(blank=True, help_text='Time in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.crop')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DiagnosisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_health_status', models.CharField(default='Unknown', max_length=50)),
                ('recommendations', models.TextField(blank=True)),
                ('urgency_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('scientific_name', models.CharField(blank=True, max_length=200)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('symptoms', models.TextField()),
                ('causes', models.TextField(blank=True)),
                ('prevention_methods', models.TextField(blank=True)),
                ('treatment_methods', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='disease_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('crops', models.ManyToManyField(related_name='diseases', to='diagnosis.crop')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FeedbackRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy_rating', models.IntegerField(choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Excellent')])),
                ('usefulness_rating', models.IntegerField(choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Excellent')])),
                ('comments', models.TextField(blank=True)),
                ('would_recommend', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diagnosis_result', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.diagnosisresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiseaseDetection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_score', models.FloatField()),
                ('affected_area_percentage', models.FloatField(blank=True, null=True)),
                ('severity_assessment', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10)),
                ('diagnosis_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.diagnosisresult')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.disease')),
            ],
            options={
                'ordering': ['-confidence_score'],
            },
        ),
        migrations.AddField(
            model_name='diagnosisresult',
            name='detected_diseases',
            field=models.ManyToManyField(through='diagnosis.DiseaseDetection', to='diagnosis.disease'),
        ),
        migrations.AddField(
            model_name='diagnosisresult',
            name='diagnosis_request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='result', to='diagnosis.diagnosisrequest'),
        ),
    ]
