# Generated by Django 4.2.7 on 2025-07-07 12:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('diagnosis', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('custom_recommendations', models.TextField(blank=True)),
                ('priority_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('timeline', models.CharField(blank=True, help_text='Expected treatment timeline', max_length=200)),
                ('follow_up_required', models.BooleanField(default=True)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('diagnosis_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diagnosis.diagnosisresult')),
            ],
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('treatment_type', models.CharField(choices=[('chemical', 'Chemical'), ('biological', 'Biological'), ('cultural', 'Cultural'), ('integrated', 'Integrated')], max_length=15)),
                ('active_ingredients', models.TextField(blank=True)),
                ('application_method', models.TextField()),
                ('dosage_instructions', models.TextField()),
                ('safety_precautions', models.TextField(blank=True)),
                ('cost_estimate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('effectiveness_rating', models.FloatField(default=0.0, help_text='Rating out of 5')),
                ('organic_friendly', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-effectiveness_rating', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='CSS icon class', max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Treatment Categories',
            },
        ),
        migrations.CreateModel(
            name='TreatmentRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1, help_text='Order of application')),
                ('specific_instructions', models.TextField(blank=True)),
                ('quantity_needed', models.CharField(blank=True, max_length=100)),
                ('application_frequency', models.CharField(blank=True, max_length=100)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.recommendation')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.treatment')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='treatment',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.treatmentcategory'),
        ),
        migrations.AddField(
            model_name='treatment',
            name='diseases',
            field=models.ManyToManyField(related_name='treatments', to='diagnosis.disease'),
        ),
        migrations.AddField(
            model_name='recommendation',
            name='treatments',
            field=models.ManyToManyField(through='recommendations.TreatmentRecommendation', to='recommendations.treatment'),
        ),
        migrations.CreateModel(
            name='PreventiveMeasure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('implementation_cost', models.CharField(choices=[('low', 'Low Cost'), ('medium', 'Medium Cost'), ('high', 'High Cost')], default='medium', max_length=50)),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=50)),
                ('seasonal_timing', models.CharField(blank=True, max_length=200)),
                ('effectiveness', models.FloatField(default=0.0, help_text='Effectiveness rating out of 5')),
                ('diseases', models.ManyToManyField(related_name='preventive_measures', to='diagnosis.disease')),
            ],
            options={
                'ordering': ['-effectiveness', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TreatmentTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned')], default='not_started', max_length=15)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('effectiveness_rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Rate effectiveness 1-5', null=True)),
                ('side_effects_observed', models.TextField(blank=True)),
                ('cost_incurred', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommendation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.recommendation')),
                ('treatment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recommendations.treatment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'recommendation', 'treatment')},
            },
        ),
    ]
